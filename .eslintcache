[{"/Users/swadhera/Documents/myDocs/personal-work/spacex-search/src/index.js":"1","/Users/swadhera/Documents/myDocs/personal-work/spacex-search/src/App.js":"2","/Users/swadhera/Documents/myDocs/personal-work/spacex-search/src/pages/home/index.js":"3","/Users/swadhera/Documents/myDocs/personal-work/spacex-search/src/layouts/PageLayout/index.js":"4","/Users/swadhera/Documents/myDocs/personal-work/spacex-search/src/config/launchYearFilterConfig.js":"5","/Users/swadhera/Documents/myDocs/personal-work/spacex-search/src/components/FilterList/index.js":"6","/Users/swadhera/Documents/myDocs/personal-work/spacex-search/src/components/Button/index.js":"7","/Users/swadhera/Documents/myDocs/personal-work/spacex-search/src/config/successFilterConfig.js":"8","/Users/swadhera/Documents/myDocs/personal-work/spacex-search/src/contexts/AppContext.js":"9","/Users/swadhera/Documents/myDocs/personal-work/spacex-search/src/network/index.js":"10","/Users/swadhera/Documents/myDocs/personal-work/spacex-search/src/config/urlConfig.js":"11","/Users/swadhera/Documents/myDocs/personal-work/spacex-search/src/constants/networkConstants.js":"12","/Users/swadhera/Documents/myDocs/personal-work/spacex-search/src/components/Loader/index.js":"13","/Users/swadhera/Documents/myDocs/personal-work/spacex-search/src/utils/shuttleListUtils.js":"14","/Users/swadhera/Documents/myDocs/personal-work/spacex-search/src/components/ShuttleCard/index.js":"15"},{"size":193,"mtime":1611393765060,"results":"16","hashOfConfig":"17"},{"size":587,"mtime":1611408004541,"results":"18","hashOfConfig":"17"},{"size":3655,"mtime":1611432380043,"results":"19","hashOfConfig":"17"},{"size":1014,"mtime":1611429674926,"results":"20","hashOfConfig":"17"},{"size":905,"mtime":1611400033966,"results":"21","hashOfConfig":"17"},{"size":1621,"mtime":1611427516953,"results":"22","hashOfConfig":"17"},{"size":783,"mtime":1611403785944,"results":"23","hashOfConfig":"17"},{"size":140,"mtime":1611400287146,"results":"24","hashOfConfig":"17"},{"size":433,"mtime":1610812056765,"results":"25","hashOfConfig":"17"},{"size":3776,"mtime":1611498674182,"results":"26","hashOfConfig":"17"},{"size":215,"mtime":1611498237919,"results":"27","hashOfConfig":"17"},{"size":507,"mtime":1611393765060,"results":"28","hashOfConfig":"17"},{"size":301,"mtime":1611407949273,"results":"29","hashOfConfig":"17"},{"size":660,"mtime":1611420286369,"results":"30","hashOfConfig":"17"},{"size":1578,"mtime":1611428086659,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1sbekhr",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"/Users/swadhera/Documents/myDocs/personal-work/spacex-search/src/index.js",[],["66","67","68","69","70"],"/Users/swadhera/Documents/myDocs/personal-work/spacex-search/src/App.js",[],"/Users/swadhera/Documents/myDocs/personal-work/spacex-search/src/pages/home/index.js",["71","72"],"/**\n * Landing Page of the SpaceX Search Application\n * Sets the App Level by making an Api Call\n */\n\nimport { useState, useEffect, useContext } from 'react';\n\n// Network\nimport NetworkUtils from '../../network';\n\n// Configs\nimport launchYearFilterConfig from '../../config/launchYearFilterConfig';\nimport successFilterConfig from '../../config/successFilterConfig';\n\n// Components\nimport FilterList from '../../components/FilterList';\nimport Loader from '../../components/Loader';\nimport ShuttleCard from '../../components/ShuttleCard';\n\n// Context\nimport { AppContext } from '../../contexts/AppContext';\n\n// Utils\nimport transformShuttleData from '../../utils/shuttleListUtils';\n\n// Styles\nimport './styles.scss';\n\nconst Home = () => {\n\tconst [yearFilter] = useState(launchYearFilterConfig);\n\tconst [launchSuccessFilter] = useState(successFilterConfig);\n\tconst [landingSuccessFilter] = useState(successFilterConfig);\n\tconst [shuttleLists, setShuttleLists] = useState([]);\n\tconst [selectedFilters, setSelectecFilters] = useState({\n\t\tlaunch_year: [],\n\t\tlaunch_success: [],\n\t\tlanding_success: [],\n\t});\n\tconst [loaderVisible, setLoaderVisible] = useContext(AppContext);\n\tconst updateFilterList = ({ filterKey, value }) => {\n\t\tconst selectedFilter = selectedFilters[filterKey];\n\t\tif (selectedFilter.length) {\n\t\t\tconst selectedValueIndex = selectedFilter.indexOf(value);\n\t\t\t// remove the value from the filter list if already selcted\n\t\t\tif (selectedValueIndex > -1) {\n\t\t\t\tselectedFilter.splice(selectedValueIndex, 1);\n\t\t\t} else {\n\t\t\t\tselectedFilter.push(value);\n\t\t\t}\n\t\t\tsetSelectecFilters((prevState) => {\n\t\t\t\treturn {\n\t\t\t\t\t...prevState,\n\t\t\t\t\t[filterKey]: [...selectedFilter],\n\t\t\t\t};\n\t\t\t});\n\t\t} else {\n\t\t\tsetSelectecFilters((prevState) => {\n\t\t\t\treturn {\n\t\t\t\t\t...prevState,\n\t\t\t\t\t[filterKey]: [value],\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\t};\n\n\tconst getShuttleLists = async () => {\n\t\ttry {\n\t\t\tsetLoaderVisible(true);\n\t\t\tconst result = await NetworkUtils.makeApiRequest({\n\t\t\t\turl: '',\n\t\t\t\tparams: {\n\t\t\t\t\tlimit: 100,\n\t\t\t\t\t...selectedFilters,\n\t\t\t\t},\n\t\t\t});\n\t\t\tconst { responseData = [] } = result;\n\t\t\tif (responseData.length) {\n\t\t\t\tconst tranformedData = transformShuttleData(responseData);\n\t\t\t\tsetShuttleLists(tranformedData);\n\t\t\t} else {\n\t\t\t\tsetShuttleLists([]);\n\t\t\t}\n\t\t\tsetLoaderVisible(false);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t} finally {\n\t\t\tsetLoaderVisible(false);\n\t\t}\n\t};\n\n\tconst getShuttleCards = () => {\n\t\tif (shuttleLists.length) {\n\t\t\tconst shuttleCards = shuttleLists.map((data) => {\n\t\t\t\treturn <ShuttleCard shuttleData={data} />;\n\t\t\t});\n\t\t\treturn shuttleCards;\n\t\t}\n\t\treturn <p>No Cards available</p>;\n\t};\n\tuseEffect(() => {\n\t\tgetShuttleLists();\n\t}, [selectedFilters]);\n\treturn (\n\t\t<div className=\"spacex-homepage d-flex w-100 flex-column flex-sm-row flex-wrap\">\n\t\t\t{loaderVisible && <Loader />}\n\t\t\t<div className=\"spacex-homepage__filters\">\n\t\t\t\t<h2>Filters</h2>\n\t\t\t\t<FilterList\n\t\t\t\t\tfilterTitle=\"Launch Year\"\n\t\t\t\t\tfilterKey=\"launch_year\"\n\t\t\t\t\tfilterList={yearFilter}\n\t\t\t\t\tupdateFilterList={updateFilterList}\n\t\t\t\t\tselectedFiltersList={selectedFilters.launch_year}\n\t\t\t\t/>\n\t\t\t\t<FilterList\n\t\t\t\t\tfilterTitle=\"Successful Launch\"\n\t\t\t\t\tfilterKey=\"launch_success\"\n\t\t\t\t\tfilterList={launchSuccessFilter}\n\t\t\t\t\tupdateFilterList={updateFilterList}\n\t\t\t\t\tselectedFiltersList={selectedFilters.launch_success}\n\t\t\t\t/>\n\t\t\t\t<FilterList\n\t\t\t\t\tfilterTitle=\"Successful Landing\"\n\t\t\t\t\tfilterKey=\"landing_success\"\n\t\t\t\t\tfilterList={landingSuccessFilter}\n\t\t\t\t\tupdateFilterList={updateFilterList}\n\t\t\t\t\tselectedFiltersList={selectedFilters.landing_success}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div className=\"spacex-homepage--cards d-flex flex-wrap\">{getShuttleCards()}</div>\n\t\t</div>\n\t);\n};\n\nexport default Home;\n","/Users/swadhera/Documents/myDocs/personal-work/spacex-search/src/layouts/PageLayout/index.js",[],"/Users/swadhera/Documents/myDocs/personal-work/spacex-search/src/config/launchYearFilterConfig.js",[],"/Users/swadhera/Documents/myDocs/personal-work/spacex-search/src/components/FilterList/index.js",[],"/Users/swadhera/Documents/myDocs/personal-work/spacex-search/src/components/Button/index.js",[],["73","74","75","76","77"],"/Users/swadhera/Documents/myDocs/personal-work/spacex-search/src/config/successFilterConfig.js",[],"/Users/swadhera/Documents/myDocs/personal-work/spacex-search/src/contexts/AppContext.js",[],"/Users/swadhera/Documents/myDocs/personal-work/spacex-search/src/network/index.js",["78"],"/**\n * This file will be used for all API calls.\n */\nimport axios from 'axios';\nimport queryString from 'query-string';\nimport networkConstants from '../constants/networkConstants';\nimport urlConfig from '../config/urlConfig';\n\nconst { baseUrl = {} } = urlConfig;\nexport default class NetworkUtils {\n\tstatic env = process.env.REACT_APP_BUILD_ENV || 'default';\n\n\tstatic networkParams = {\n\t\tserverBaseUrl: baseUrl[this.env],\n\t};\n\n\tstatic memoizedData = {};\n\n\t/**\n\t * @method handleErrors This method will be invoked when the api calls throw an error and will construct the errorObj containing errorCode and error message based on the error Code recieved.\n\t * @param {*} err Object: {response : {status = '', errors ; []}}\n\t */\n\tstatic handleErros(err) {\n\t\tconst { response: { status = '' } = {} } = err;\n\n\t\tconst {\n\t\t\tUNAUTHORIZED_MESSAGE,\n\t\t\tBAD_REQUEST_MESSAGE,\n\t\t\tFORBIDDEN_MESSAGE,\n\t\t\tNOT_FOUND_MESSAGE,\n\t\t\tREQUEST_TIMED_OUT,\n\t\t\tSERVER_ERROR,\n\t\t\tBAD_GATEWAY,\n\t\t\tGATEWAY_TIMEOUT,\n\t\t\tGENERIC_ERROR,\n\t\t} = networkConstants;\n\n\t\tconst errorObject = {\n\t\t\tstatus,\n\t\t\terrorMessage: GENERIC_ERROR, // default error Message\n\t\t};\n\n\t\tswitch (status) {\n\t\t\tcase 400:\n\t\t\t\terrorObject.errorMessage = BAD_REQUEST_MESSAGE;\n\t\t\t\tbreak;\n\t\t\tcase 401:\n\t\t\t\terrorObject.errorMessage = UNAUTHORIZED_MESSAGE;\n\t\t\t\tbreak;\n\t\t\tcase 403:\n\t\t\t\terrorObject.errorMessage = FORBIDDEN_MESSAGE;\n\t\t\t\tbreak;\n\t\t\tcase 404:\n\t\t\t\terrorObject.errorMessage = NOT_FOUND_MESSAGE;\n\t\t\t\tbreak;\n\t\t\tcase 408:\n\t\t\t\terrorObject.errorMessage = REQUEST_TIMED_OUT;\n\t\t\t\tbreak;\n\t\t\tcase 500:\n\t\t\t\terrorObject.errorMessage = SERVER_ERROR;\n\t\t\t\tbreak;\n\t\t\tcase 502:\n\t\t\t\terrorObject.errorMessage = BAD_GATEWAY;\n\t\t\t\tbreak;\n\t\t\tcase 503:\n\t\t\t\terrorObject.errorMessage = GATEWAY_TIMEOUT;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn errorObject;\n\t}\n\n\t/**\n\t * @method makeApiRequest This method is a wrapper on all network calls. If any kind\n\t * of customization is required, that should be done here\n\t * @param {*} requestObject\n\t * requestObject will include below attributes\n\t * requuestObject  = {\n\t *    method,   // The type of request, GET, POST, PUT, DELETE etc\n\t *    url,  //The url needs to be called\n\t *    data, // The data needs to be passed to server\n\t *    params, // For get request, if any parameter need to be passed along with URL\n\t *    memoizeResponse, // If true, it will remember the response and next time it won't make\n\t *    isExternal, //  boolean: If the network call is third-party call\n\t *    skipHeader, // boolean: If the auth token needs to be skipped for any request\n\t * }\n\t */\n\n\tstatic makeApiRequest(requestObject) {\n\t\tconst {\n\t\t\tmethod,\n\t\t\turl,\n\t\t\tdata = {},\n\t\t\tparams = undefined,\n\t\t\tmemoizeResponse = false,\n\t\t\tisExternal = false,\n\t\t} = requestObject;\n\n\t\tconst { serverBaseUrl } = this.networkParams;\n\t\tconsole.log(process);\n\t\t/* eslint-disable consistent-return */\n\t\treturn new Promise((resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tconst completeUrl = isExternal ? url : `${serverBaseUrl}/${url}`;\n\n\t\t\t\tif (this.memoizedData[completeUrl]) {\n\t\t\t\t\treturn resolve(this.memoizedData[completeUrl]);\n\t\t\t\t}\n\t\t\t\tconst headerObject = {\n\t\t\t\t\t'content-type': 'application/json',\n\t\t\t\t};\n\t\t\t\taxios({\n\t\t\t\t\tmethod,\n\t\t\t\t\turl: completeUrl,\n\t\t\t\t\tdata,\n\t\t\t\t\tparams,\n\t\t\t\t\theaders: headerObject,\n\t\t\t\t\tparamsSerializer: (queryParams) =>\n\t\t\t\t\t\tqueryString.stringify(queryParams, {\n\t\t\t\t\t\t\tarrayFormat: 'repeat',\n\t\t\t\t\t\t}),\n\t\t\t\t})\n\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\tconst { data: responseData, status } = response;\n\t\t\t\t\t\tif (memoizeResponse) {\n\t\t\t\t\t\t\tthis.memoizedData[completeUrl] = { responseData, status };\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn resolve({ responseData, status });\n\t\t\t\t\t})\n\t\t\t\t\t.catch((err) => {\n\t\t\t\t\t\tconst errorObject = this.handleErros(err);\n\t\t\t\t\t\treturn reject(errorObject);\n\t\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\treturn reject(e);\n\t\t\t}\n\t\t});\n\t}\n}\n","/Users/swadhera/Documents/myDocs/personal-work/spacex-search/src/config/urlConfig.js",[],"/Users/swadhera/Documents/myDocs/personal-work/spacex-search/src/constants/networkConstants.js",[],"/Users/swadhera/Documents/myDocs/personal-work/spacex-search/src/components/Loader/index.js",[],"/Users/swadhera/Documents/myDocs/personal-work/spacex-search/src/utils/shuttleListUtils.js",[],"/Users/swadhera/Documents/myDocs/personal-work/spacex-search/src/components/ShuttleCard/index.js",[],{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":85,"column":4,"nodeType":"91","messageId":"92","endLine":85,"endColumn":15},{"ruleId":"93","severity":1,"message":"94","line":102,"column":5,"nodeType":"95","endLine":102,"endColumn":22,"suggestions":"96"},{"ruleId":"79","replacedBy":"97"},{"ruleId":"81","replacedBy":"98"},{"ruleId":"83","replacedBy":"99"},{"ruleId":"85","replacedBy":"100"},{"ruleId":"87","replacedBy":"101"},{"ruleId":"89","severity":1,"message":"90","line":102,"column":3,"nodeType":"91","messageId":"92","endLine":102,"endColumn":14},"lines-around-directive",["102"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-console","Unexpected console statement.","MemberExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getShuttleLists'. Either include it or remove the dependency array.","ArrayExpression",["103"],["102"],[],[],[],[],"padding-line-between-statements",{"desc":"104","fix":"105"},"Update the dependencies array to be: [getShuttleLists, selectedFilters]",{"range":"106","text":"107"},[2638,2655],"[getShuttleLists, selectedFilters]"]